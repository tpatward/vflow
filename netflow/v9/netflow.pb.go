// Code generated by protoc-gen-go. DO NOT EDIT.
// source: netflow.proto

/*
Package FlowProto is a generated protocol buffer package.

It is generated from these files:
	netflow.proto

It has these top-level messages:
	FlowRecord
	Header
	FlowMessage
*/
package FlowProto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FlowRecord_KeyType int32

const (
	FlowRecord_IPv4 FlowRecord_KeyType = 1
	FlowRecord_IPv6 FlowRecord_KeyType = 2
)

var FlowRecord_KeyType_name = map[int32]string{
	1: "IPv4",
	2: "IPv6",
}
var FlowRecord_KeyType_value = map[string]int32{
	"IPv4": 1,
	"IPv6": 2,
}

func (x FlowRecord_KeyType) Enum() *FlowRecord_KeyType {
	p := new(FlowRecord_KeyType)
	*p = x
	return p
}
func (x FlowRecord_KeyType) String() string {
	return proto.EnumName(FlowRecord_KeyType_name, int32(x))
}
func (x *FlowRecord_KeyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FlowRecord_KeyType_value, data, "FlowRecord_KeyType")
	if err != nil {
		return err
	}
	*x = FlowRecord_KeyType(value)
	return nil
}
func (FlowRecord_KeyType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type FlowRecord struct {
	StartTime        *uint64             `protobuf:"varint,1,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime          *uint64             `protobuf:"varint,2,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	PacketCount      *uint32             `protobuf:"varint,3,opt,name=packet_count,json=packetCount" json:"packet_count,omitempty"`
	ByteCount        *uint64             `protobuf:"varint,4,opt,name=byte_count,json=byteCount" json:"byte_count,omitempty"`
	FlowId           *uint32             `protobuf:"varint,5,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
	KeyType          *FlowRecord_KeyType `protobuf:"varint,6,opt,name=key_type,json=keyType,enum=FlowProto.FlowRecord_KeyType" json:"key_type,omitempty"`
	SrcAddress       []byte              `protobuf:"bytes,7,opt,name=src_address,json=srcAddress" json:"src_address,omitempty"`
	SrcPrefix        *uint32             `protobuf:"varint,8,opt,name=src_prefix,json=srcPrefix" json:"src_prefix,omitempty"`
	DstAddress       []byte              `protobuf:"bytes,9,opt,name=dst_address,json=dstAddress" json:"dst_address,omitempty"`
	DstPrefix        *uint32             `protobuf:"varint,10,opt,name=dst_prefix,json=dstPrefix" json:"dst_prefix,omitempty"`
	SrcMac           []byte              `protobuf:"bytes,11,opt,name=src_mac,json=srcMac" json:"src_mac,omitempty"`
	DstMac           []byte              `protobuf:"bytes,12,opt,name=dst_mac,json=dstMac" json:"dst_mac,omitempty"`
	SrcPort          *uint32             `protobuf:"varint,13,opt,name=src_port,json=srcPort" json:"src_port,omitempty"`
	DstPort          *uint32             `protobuf:"varint,14,opt,name=dst_port,json=dstPort" json:"dst_port,omitempty"`
	Proto            *uint32             `protobuf:"varint,15,opt,name=proto" json:"proto,omitempty"`
	TenantId         *uint32             `protobuf:"varint,16,opt,name=tenant_id,json=tenantId" json:"tenant_id,omitempty"`
	Vrf              *uint64             `protobuf:"varint,17,opt,name=vrf" json:"vrf,omitempty"`
	Vnid             *uint32             `protobuf:"varint,18,opt,name=vnid" json:"vnid,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *FlowRecord) Reset()                    { *m = FlowRecord{} }
func (m *FlowRecord) String() string            { return proto.CompactTextString(m) }
func (*FlowRecord) ProtoMessage()               {}
func (*FlowRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FlowRecord) GetStartTime() uint64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *FlowRecord) GetEndTime() uint64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *FlowRecord) GetPacketCount() uint32 {
	if m != nil && m.PacketCount != nil {
		return *m.PacketCount
	}
	return 0
}

func (m *FlowRecord) GetByteCount() uint64 {
	if m != nil && m.ByteCount != nil {
		return *m.ByteCount
	}
	return 0
}

func (m *FlowRecord) GetFlowId() uint32 {
	if m != nil && m.FlowId != nil {
		return *m.FlowId
	}
	return 0
}

func (m *FlowRecord) GetKeyType() FlowRecord_KeyType {
	if m != nil && m.KeyType != nil {
		return *m.KeyType
	}
	return FlowRecord_IPv4
}

func (m *FlowRecord) GetSrcAddress() []byte {
	if m != nil {
		return m.SrcAddress
	}
	return nil
}

func (m *FlowRecord) GetSrcPrefix() uint32 {
	if m != nil && m.SrcPrefix != nil {
		return *m.SrcPrefix
	}
	return 0
}

func (m *FlowRecord) GetDstAddress() []byte {
	if m != nil {
		return m.DstAddress
	}
	return nil
}

func (m *FlowRecord) GetDstPrefix() uint32 {
	if m != nil && m.DstPrefix != nil {
		return *m.DstPrefix
	}
	return 0
}

func (m *FlowRecord) GetSrcMac() []byte {
	if m != nil {
		return m.SrcMac
	}
	return nil
}

func (m *FlowRecord) GetDstMac() []byte {
	if m != nil {
		return m.DstMac
	}
	return nil
}

func (m *FlowRecord) GetSrcPort() uint32 {
	if m != nil && m.SrcPort != nil {
		return *m.SrcPort
	}
	return 0
}

func (m *FlowRecord) GetDstPort() uint32 {
	if m != nil && m.DstPort != nil {
		return *m.DstPort
	}
	return 0
}

func (m *FlowRecord) GetProto() uint32 {
	if m != nil && m.Proto != nil {
		return *m.Proto
	}
	return 0
}

func (m *FlowRecord) GetTenantId() uint32 {
	if m != nil && m.TenantId != nil {
		return *m.TenantId
	}
	return 0
}

func (m *FlowRecord) GetVrf() uint64 {
	if m != nil && m.Vrf != nil {
		return *m.Vrf
	}
	return 0
}

func (m *FlowRecord) GetVnid() uint32 {
	if m != nil && m.Vnid != nil {
		return *m.Vnid
	}
	return 0
}

type Header struct {
	Version          *uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Count            *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	SystemUpTime     *uint32 `protobuf:"varint,3,opt,name=system_up_time,json=systemUpTime" json:"system_up_time,omitempty"`
	Timestamp        *uint32 `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	SequenceNumber   *uint32 `protobuf:"varint,5,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	SrcId            *uint32 `protobuf:"varint,6,opt,name=src_id,json=srcId" json:"src_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Header) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *Header) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *Header) GetSystemUpTime() uint32 {
	if m != nil && m.SystemUpTime != nil {
		return *m.SystemUpTime
	}
	return 0
}

func (m *Header) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *Header) GetSequenceNumber() uint32 {
	if m != nil && m.SequenceNumber != nil {
		return *m.SequenceNumber
	}
	return 0
}

func (m *Header) GetSrcId() uint32 {
	if m != nil && m.SrcId != nil {
		return *m.SrcId
	}
	return 0
}

// A flow message is defined as a header followed by a bunch of flow records
type FlowMessage struct {
	AgentId          *string       `protobuf:"bytes,1,req,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	Headers          *Header       `protobuf:"bytes,2,opt,name=headers" json:"headers,omitempty"`
	FlowRecords      []*FlowRecord `protobuf:"bytes,3,rep,name=flow_records,json=flowRecords" json:"flow_records,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *FlowMessage) Reset()                    { *m = FlowMessage{} }
func (m *FlowMessage) String() string            { return proto.CompactTextString(m) }
func (*FlowMessage) ProtoMessage()               {}
func (*FlowMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FlowMessage) GetAgentId() string {
	if m != nil && m.AgentId != nil {
		return *m.AgentId
	}
	return ""
}

func (m *FlowMessage) GetHeaders() *Header {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *FlowMessage) GetFlowRecords() []*FlowRecord {
	if m != nil {
		return m.FlowRecords
	}
	return nil
}

func init() {
	proto.RegisterType((*FlowRecord)(nil), "FlowProto.FlowRecord")
	proto.RegisterType((*Header)(nil), "FlowProto.Header")
	proto.RegisterType((*FlowMessage)(nil), "FlowProto.FlowMessage")
	proto.RegisterEnum("FlowProto.FlowRecord_KeyType", FlowRecord_KeyType_name, FlowRecord_KeyType_value)
}

func init() { proto.RegisterFile("netflow.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 549 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0xdd, 0x6a, 0xdb, 0x4c,
	0x10, 0x45, 0xb6, 0x63, 0x59, 0x23, 0xdb, 0x71, 0x96, 0x2f, 0x64, 0xc3, 0xd7, 0x50, 0xd5, 0x14,
	0x2a, 0x28, 0xf8, 0x22, 0x94, 0x92, 0xdb, 0x52, 0x28, 0x35, 0x25, 0xc5, 0x88, 0xf4, 0x5a, 0x28,
	0xbb, 0xe3, 0x54, 0x24, 0xfa, 0xe9, 0xee, 0xda, 0xa9, 0x9e, 0xa2, 0x0f, 0xd4, 0x3e, 0x5c, 0x99,
	0x59, 0xe5, 0xe7, 0xa2, 0x77, 0x33, 0xe7, 0xcc, 0x99, 0x9d, 0x99, 0x3d, 0x30, 0xab, 0xd1, 0x6d,
	0xef, 0x9a, 0xfb, 0x55, 0x6b, 0x1a, 0xd7, 0x88, 0xe8, 0xd3, 0x5d, 0x73, 0xbf, 0xa1, 0x70, 0xf9,
	0x7b, 0x04, 0x40, 0x59, 0x86, 0xaa, 0x31, 0x5a, 0x9c, 0x01, 0x58, 0x57, 0x18, 0x97, 0xbb, 0xb2,
	0x42, 0x19, 0x24, 0x41, 0x3a, 0xca, 0x22, 0x46, 0xae, 0xca, 0x0a, 0xc5, 0x29, 0x4c, 0xb0, 0xd6,
	0x9e, 0x1c, 0x30, 0x19, 0x62, 0xad, 0x99, 0x7a, 0x05, 0xd3, 0xb6, 0x50, 0xb7, 0xe8, 0x72, 0xd5,
	0xec, 0x6a, 0x27, 0x87, 0x49, 0x90, 0xce, 0xb2, 0xd8, 0x63, 0x1f, 0x09, 0xa2, 0xe6, 0xd7, 0x9d,
	0xc3, 0xbe, 0x60, 0xe4, 0x9b, 0x13, 0xe2, 0xe9, 0x13, 0x08, 0x69, 0xc6, 0xbc, 0xd4, 0xf2, 0x80,
	0xc5, 0x63, 0x4a, 0xd7, 0x5a, 0x5c, 0xc0, 0xe4, 0x16, 0xbb, 0xdc, 0x75, 0x2d, 0xca, 0x71, 0x12,
	0xa4, 0xf3, 0xf3, 0xb3, 0xd5, 0xe3, 0x06, 0xab, 0xa7, 0xe9, 0x57, 0x5f, 0xb0, 0xbb, 0xea, 0x5a,
	0xcc, 0xc2, 0x5b, 0x1f, 0x88, 0x97, 0x10, 0x5b, 0xa3, 0xf2, 0x42, 0x6b, 0x83, 0xd6, 0xca, 0x30,
	0x09, 0xd2, 0x69, 0x06, 0xd6, 0xa8, 0x0f, 0x1e, 0xe1, 0x7d, 0x8d, 0xca, 0x5b, 0x83, 0xdb, 0xf2,
	0xa7, 0x9c, 0xf0, 0xb3, 0x91, 0x35, 0x6a, 0xc3, 0x00, 0xe9, 0xb5, 0x75, 0x8f, 0xfa, 0xc8, 0xeb,
	0xb5, 0x75, 0xcf, 0xf4, 0x54, 0xd0, 0xeb, 0xc1, 0xeb, 0xb5, 0x75, 0xbd, 0xfe, 0x04, 0x42, 0x6a,
	0x5f, 0x15, 0x4a, 0xc6, 0xac, 0x1d, 0x5b, 0xa3, 0x2e, 0x0b, 0x45, 0x04, 0xe9, 0x88, 0x98, 0x7a,
	0x42, 0x5b, 0x47, 0xc4, 0x29, 0x4c, 0x78, 0xa0, 0xc6, 0x38, 0x39, 0xe3, 0x76, 0xd4, 0x61, 0xd3,
	0x18, 0x47, 0x14, 0xbf, 0x45, 0xd4, 0xdc, 0x53, 0xf4, 0x12, 0x51, 0xff, 0xc1, 0x01, 0xff, 0xac,
	0x3c, 0x64, 0xdc, 0x27, 0xe2, 0x7f, 0x88, 0x1c, 0xd6, 0x45, 0xed, 0xe8, 0xa4, 0x0b, 0x66, 0x26,
	0x1e, 0x58, 0x6b, 0xb1, 0x80, 0xe1, 0xde, 0x6c, 0xe5, 0x11, 0xff, 0x02, 0x85, 0x42, 0xc0, 0x68,
	0x5f, 0x97, 0x5a, 0x0a, 0xae, 0xe4, 0x78, 0x79, 0x06, 0x61, 0x7f, 0x54, 0x31, 0x81, 0xd1, 0x7a,
	0xb3, 0x7f, 0xb7, 0x08, 0xfa, 0xe8, 0xfd, 0x62, 0xb0, 0xfc, 0x13, 0xc0, 0xf8, 0x33, 0x16, 0x1a,
	0x8d, 0x90, 0x10, 0xee, 0xd1, 0xd8, 0xb2, 0xa9, 0xd9, 0x36, 0xb3, 0xec, 0x21, 0xa5, 0xe1, 0xfc,
	0x8f, 0x0f, 0xfc, 0x70, 0x9c, 0x88, 0xd7, 0x30, 0xb7, 0x9d, 0x75, 0x58, 0xe5, 0xbb, 0xd6, 0x1b,
	0xca, 0x3b, 0x66, 0xea, 0xd1, 0x6f, 0x2d, 0xbb, 0xea, 0x05, 0x44, 0xc4, 0x59, 0x57, 0x54, 0x2d,
	0x3b, 0x66, 0x96, 0x3d, 0x01, 0xe2, 0x0d, 0x1c, 0x5a, 0xfc, 0xb1, 0xc3, 0x5a, 0x61, 0x5e, 0xef,
	0xaa, 0x6b, 0x34, 0xbd, 0x73, 0xe6, 0x0f, 0xf0, 0x57, 0x46, 0xc5, 0x31, 0xd0, 0xe1, 0xe9, 0x0c,
	0x63, 0x3f, 0x83, 0x35, 0x6a, 0xad, 0x97, 0xbf, 0x02, 0x88, 0xc9, 0x3e, 0x97, 0x68, 0x6d, 0x71,
	0xc3, 0xf6, 0x2e, 0x6e, 0xd0, 0xdf, 0x2b, 0x48, 0x06, 0x69, 0x94, 0x85, 0x9c, 0xaf, 0xb5, 0x78,
	0x0b, 0xe1, 0x77, 0x5e, 0xd4, 0xf2, 0x1a, 0xf1, 0xf9, 0xd1, 0x33, 0x0b, 0xfa, 0x13, 0x64, 0x0f,
	0x15, 0xe2, 0x02, 0xa6, 0xec, 0x64, 0xc3, 0xb6, 0xb4, 0x72, 0x98, 0x0c, 0xd3, 0xf8, 0xfc, 0xf8,
	0x9f, 0xa6, 0xcd, 0xe2, 0xed, 0x63, 0x6c, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x5f, 0x53, 0x2b,
	0xf6, 0xa9, 0x03, 0x00, 0x00,
}
