// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vflow.proto

/*
Package vflow is a generated protocol buffer package.

It is generated from these files:
	vflow.proto

It has these top-level messages:
	FlowRecord
	Header
	FlowMessage
*/
package vflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FlowRecord_KeyType int32

const (
	FlowRecord_IPv4 FlowRecord_KeyType = 1
	FlowRecord_IPv6 FlowRecord_KeyType = 2
)

var FlowRecord_KeyType_name = map[int32]string{
	1: "IPv4",
	2: "IPv6",
}
var FlowRecord_KeyType_value = map[string]int32{
	"IPv4": 1,
	"IPv6": 2,
}

func (x FlowRecord_KeyType) Enum() *FlowRecord_KeyType {
	p := new(FlowRecord_KeyType)
	*p = x
	return p
}
func (x FlowRecord_KeyType) String() string {
	return proto.EnumName(FlowRecord_KeyType_name, int32(x))
}
func (x *FlowRecord_KeyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FlowRecord_KeyType_value, data, "FlowRecord_KeyType")
	if err != nil {
		return err
	}
	*x = FlowRecord_KeyType(value)
	return nil
}
func (FlowRecord_KeyType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type FlowRecord struct {
	StartTime        *uint64             `protobuf:"varint,1,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime          *uint64             `protobuf:"varint,2,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	PacketCount      *uint32             `protobuf:"varint,3,opt,name=packet_count,json=packetCount" json:"packet_count,omitempty"`
	ByteCount        *uint64             `protobuf:"varint,4,opt,name=byte_count,json=byteCount" json:"byte_count,omitempty"`
	FlowId           *uint32             `protobuf:"varint,5,opt,name=flow_id,json=flowId" json:"flow_id,omitempty"`
	Key              *FlowRecord_KeyType `protobuf:"varint,6,opt,name=key,enum=FlowProto.FlowRecord_KeyType" json:"key,omitempty"`
	SrcAddress       []byte              `protobuf:"bytes,7,opt,name=src_address,json=srcAddress" json:"src_address,omitempty"`
	SrcPrefix        *uint32             `protobuf:"varint,8,opt,name=src_prefix,json=srcPrefix" json:"src_prefix,omitempty"`
	DstAddress       []byte              `protobuf:"bytes,9,opt,name=dst_address,json=dstAddress" json:"dst_address,omitempty"`
	DstPrefix        *uint32             `protobuf:"varint,10,opt,name=dst_prefix,json=dstPrefix" json:"dst_prefix,omitempty"`
	SrcMac           []byte              `protobuf:"bytes,11,opt,name=src_mac,json=srcMac" json:"src_mac,omitempty"`
	DstMac           []byte              `protobuf:"bytes,12,opt,name=dst_mac,json=dstMac" json:"dst_mac,omitempty"`
	SrcPort          *uint32             `protobuf:"varint,13,opt,name=src_port,json=srcPort" json:"src_port,omitempty"`
	DstPort          *uint32             `protobuf:"varint,14,opt,name=dst_port,json=dstPort" json:"dst_port,omitempty"`
	Proto            *uint32             `protobuf:"varint,15,opt,name=proto" json:"proto,omitempty"`
	TenantId         *uint32             `protobuf:"varint,16,opt,name=tenant_id,json=tenantId" json:"tenant_id,omitempty"`
	Vrf              *uint64             `protobuf:"varint,17,opt,name=vrf" json:"vrf,omitempty"`
	Vnid             *uint32             `protobuf:"varint,18,opt,name=vnid" json:"vnid,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *FlowRecord) Reset()                    { *m = FlowRecord{} }
func (m *FlowRecord) String() string            { return proto.CompactTextString(m) }
func (*FlowRecord) ProtoMessage()               {}
func (*FlowRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FlowRecord) GetStartTime() uint64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *FlowRecord) GetEndTime() uint64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *FlowRecord) GetPacketCount() uint32 {
	if m != nil && m.PacketCount != nil {
		return *m.PacketCount
	}
	return 0
}

func (m *FlowRecord) GetByteCount() uint64 {
	if m != nil && m.ByteCount != nil {
		return *m.ByteCount
	}
	return 0
}

func (m *FlowRecord) GetFlowId() uint32 {
	if m != nil && m.FlowId != nil {
		return *m.FlowId
	}
	return 0
}

func (m *FlowRecord) GetKey() FlowRecord_KeyType {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return FlowRecord_IPv4
}

func (m *FlowRecord) GetSrcAddress() []byte {
	if m != nil {
		return m.SrcAddress
	}
	return nil
}

func (m *FlowRecord) GetSrcPrefix() uint32 {
	if m != nil && m.SrcPrefix != nil {
		return *m.SrcPrefix
	}
	return 0
}

func (m *FlowRecord) GetDstAddress() []byte {
	if m != nil {
		return m.DstAddress
	}
	return nil
}

func (m *FlowRecord) GetDstPrefix() uint32 {
	if m != nil && m.DstPrefix != nil {
		return *m.DstPrefix
	}
	return 0
}

func (m *FlowRecord) GetSrcMac() []byte {
	if m != nil {
		return m.SrcMac
	}
	return nil
}

func (m *FlowRecord) GetDstMac() []byte {
	if m != nil {
		return m.DstMac
	}
	return nil
}

func (m *FlowRecord) GetSrcPort() uint32 {
	if m != nil && m.SrcPort != nil {
		return *m.SrcPort
	}
	return 0
}

func (m *FlowRecord) GetDstPort() uint32 {
	if m != nil && m.DstPort != nil {
		return *m.DstPort
	}
	return 0
}

func (m *FlowRecord) GetProto() uint32 {
	if m != nil && m.Proto != nil {
		return *m.Proto
	}
	return 0
}

func (m *FlowRecord) GetTenantId() uint32 {
	if m != nil && m.TenantId != nil {
		return *m.TenantId
	}
	return 0
}

func (m *FlowRecord) GetVrf() uint64 {
	if m != nil && m.Vrf != nil {
		return *m.Vrf
	}
	return 0
}

func (m *FlowRecord) GetVnid() uint32 {
	if m != nil && m.Vnid != nil {
		return *m.Vnid
	}
	return 0
}

type Header struct {
	Version          *uint32 `protobuf:"varint,1,opt,name=Version" json:"Version,omitempty"`
	Count            *uint32 `protobuf:"varint,2,opt,name=Count" json:"Count,omitempty"`
	SysUpTime        *uint32 `protobuf:"varint,3,opt,name=SysUpTime" json:"SysUpTime,omitempty"`
	UNIXSecs         *uint32 `protobuf:"varint,4,opt,name=UNIXSecs" json:"UNIXSecs,omitempty"`
	SeqNum           *uint32 `protobuf:"varint,5,opt,name=SeqNum" json:"SeqNum,omitempty"`
	SrcId            *uint32 `protobuf:"varint,6,opt,name=SrcId" json:"SrcId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Header) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *Header) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *Header) GetSysUpTime() uint32 {
	if m != nil && m.SysUpTime != nil {
		return *m.SysUpTime
	}
	return 0
}

func (m *Header) GetUNIXSecs() uint32 {
	if m != nil && m.UNIXSecs != nil {
		return *m.UNIXSecs
	}
	return 0
}

func (m *Header) GetSeqNum() uint32 {
	if m != nil && m.SeqNum != nil {
		return *m.SeqNum
	}
	return 0
}

func (m *Header) GetSrcId() uint32 {
	if m != nil && m.SrcId != nil {
		return *m.SrcId
	}
	return 0
}

// A flow message is defined as a header followed by a bunch of flow records
type FlowMessage struct {
	Headers          *Header       `protobuf:"bytes,1,opt,name=headers" json:"headers,omitempty"`
	FlowRecords      []*FlowRecord `protobuf:"bytes,2,rep,name=flow_records,json=flowRecords" json:"flow_records,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *FlowMessage) Reset()                    { *m = FlowMessage{} }
func (m *FlowMessage) String() string            { return proto.CompactTextString(m) }
func (*FlowMessage) ProtoMessage()               {}
func (*FlowMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FlowMessage) GetHeaders() *Header {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *FlowMessage) GetFlowRecords() []*FlowRecord {
	if m != nil {
		return m.FlowRecords
	}
	return nil
}

func init() {
	proto.RegisterType((*FlowRecord)(nil), "FlowProto.FlowRecord")
	proto.RegisterType((*Header)(nil), "FlowProto.Header")
	proto.RegisterType((*FlowMessage)(nil), "FlowProto.FlowMessage")
	proto.RegisterEnum("FlowProto.FlowRecord_KeyType", FlowRecord_KeyType_name, FlowRecord_KeyType_value)
}

func init() { proto.RegisterFile("vflow.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 522 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x55, 0xda, 0xae, 0x49, 0x6e, 0x9a, 0xd1, 0x59, 0xc0, 0x3c, 0xa0, 0xa2, 0xf4, 0xa9, 0x12,
	0x52, 0x27, 0x55, 0x08, 0xf1, 0x0a, 0x48, 0x88, 0x0a, 0x6d, 0xaa, 0xdc, 0x0d, 0x21, 0x5e, 0xa2,
	0x60, 0xbb, 0x10, 0x6d, 0x4d, 0x82, 0xed, 0x75, 0xe4, 0x6f, 0xf8, 0x06, 0xbe, 0x10, 0xdd, 0xeb,
	0xb4, 0xdb, 0xc3, 0xde, 0xee, 0x39, 0xe7, 0x9e, 0xeb, 0x1b, 0xfb, 0x04, 0x92, 0xed, 0xfa, 0xba,
	0xba, 0x9d, 0xd5, 0xa6, 0x72, 0x15, 0x8b, 0x3f, 0x5d, 0x57, 0xb7, 0x4b, 0x2c, 0x27, 0xff, 0x7a,
	0x00, 0x88, 0x84, 0x96, 0x95, 0x51, 0x6c, 0x04, 0x60, 0x5d, 0x6e, 0x5c, 0xe6, 0x8a, 0x8d, 0xe6,
	0xc1, 0x38, 0x98, 0xf6, 0x44, 0x4c, 0xcc, 0x45, 0xb1, 0xd1, 0xec, 0x04, 0x22, 0x5d, 0x2a, 0x2f,
	0x76, 0x48, 0x0c, 0x75, 0xa9, 0x48, 0x7a, 0x05, 0x83, 0x3a, 0x97, 0x57, 0xda, 0x65, 0xb2, 0xba,
	0x29, 0x1d, 0xef, 0x8e, 0x83, 0x69, 0x2a, 0x12, 0xcf, 0x7d, 0x44, 0x0a, 0x87, 0xff, 0x68, 0x9c,
	0x6e, 0x1b, 0x7a, 0x7e, 0x38, 0x32, 0x5e, 0x3e, 0x86, 0x10, 0x77, 0xcc, 0x0a, 0xc5, 0x0f, 0xc8,
	0xdc, 0x47, 0xb8, 0x50, 0xec, 0x14, 0xba, 0x57, 0xba, 0xe1, 0xfd, 0x71, 0x30, 0x3d, 0x9c, 0x8f,
	0x66, 0xfb, 0xe5, 0x67, 0x77, 0x8b, 0xcf, 0xbe, 0xe8, 0xe6, 0xa2, 0xa9, 0xb5, 0xc0, 0x4e, 0xf6,
	0x12, 0x12, 0x6b, 0x64, 0x96, 0x2b, 0x65, 0xb4, 0xb5, 0x3c, 0x1c, 0x07, 0xd3, 0x81, 0x00, 0x6b,
	0xe4, 0x7b, 0xcf, 0xd0, 0x67, 0x1a, 0x99, 0xd5, 0x46, 0xaf, 0x8b, 0x3f, 0x3c, 0xa2, 0xd3, 0x62,
	0x6b, 0xe4, 0x92, 0x08, 0xf4, 0x2b, 0xeb, 0xf6, 0xfe, 0xd8, 0xfb, 0x95, 0x75, 0xf7, 0xfc, 0xd8,
	0xd0, 0xfa, 0xc1, 0xfb, 0x95, 0x75, 0xad, 0xff, 0x18, 0x42, 0x1c, 0xbf, 0xc9, 0x25, 0x4f, 0xc8,
	0xdb, 0xb7, 0x46, 0x9e, 0xe5, 0x12, 0x05, 0xf4, 0xa1, 0x30, 0xf0, 0x82, 0xb2, 0x0e, 0x85, 0x13,
	0x88, 0x68, 0xa1, 0xca, 0x38, 0x9e, 0xd2, 0x38, 0x9c, 0xb0, 0xac, 0x8c, 0x43, 0x89, 0xce, 0x42,
	0xe9, 0xd0, 0x4b, 0x78, 0x12, 0x4a, 0x8f, 0xe1, 0x80, 0x1e, 0x94, 0x3f, 0x22, 0xde, 0x03, 0xf6,
	0x1c, 0x62, 0xa7, 0xcb, 0xbc, 0x74, 0x78, 0x93, 0x43, 0x52, 0x22, 0x4f, 0x2c, 0x14, 0x1b, 0x42,
	0x77, 0x6b, 0xd6, 0xfc, 0x88, 0x2e, 0x1f, 0x4b, 0xc6, 0xa0, 0xb7, 0x2d, 0x0b, 0xc5, 0x19, 0x75,
	0x52, 0x3d, 0x19, 0x41, 0xd8, 0x5e, 0x28, 0x8b, 0xa0, 0xb7, 0x58, 0x6e, 0xdf, 0x0c, 0x83, 0xb6,
	0x7a, 0x3b, 0xec, 0x4c, 0xfe, 0x06, 0xd0, 0xff, 0xac, 0x73, 0xa5, 0x0d, 0xe3, 0x10, 0x7e, 0xd5,
	0xc6, 0x16, 0x55, 0x49, 0x69, 0x49, 0xc5, 0x0e, 0xe2, 0x72, 0xf4, 0xae, 0x14, 0x94, 0x54, 0x78,
	0xc0, 0x5e, 0x40, 0xbc, 0x6a, 0xec, 0x65, 0x8d, 0x99, 0x69, 0x33, 0x72, 0x47, 0xb0, 0x67, 0x10,
	0x5d, 0x9e, 0x2f, 0xbe, 0xad, 0xb4, 0xb4, 0x94, 0x8f, 0x54, 0xec, 0x31, 0x7b, 0x0a, 0xfd, 0x95,
	0xfe, 0x7d, 0x7e, 0xb3, 0xd9, 0xa5, 0xc3, 0x23, 0x3c, 0x67, 0x65, 0xe4, 0x42, 0x51, 0x3e, 0x52,
	0xe1, 0xc1, 0xc4, 0x41, 0x82, 0xe9, 0x38, 0xd3, 0xd6, 0xe6, 0x3f, 0x35, 0x7b, 0x0d, 0xe1, 0x2f,
	0x5a, 0xd8, 0xd2, 0x9a, 0xc9, 0xfc, 0xe8, 0x5e, 0x8c, 0xfc, 0xa7, 0x88, 0x5d, 0x07, 0x7b, 0x07,
	0x03, 0x0a, 0xa2, 0xa1, 0x68, 0x59, 0xde, 0x19, 0x77, 0xa7, 0xc9, 0xfc, 0xc9, 0x83, 0xc1, 0x13,
	0xc9, 0x7a, 0x5f, 0xdb, 0x0f, 0xf1, 0xf7, 0x70, 0x76, 0x4a, 0x7f, 0xda, 0xff, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xed, 0xec, 0xaa, 0xfe, 0x71, 0x03, 0x00, 0x00,
}
